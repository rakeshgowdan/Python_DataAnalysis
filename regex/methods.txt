re.compile(pattern, flags=0)
Compile a regular expression pattern into a regular expression object, which can be used for matching using its match(),
search() and other methods, described below.

The expression’s behaviour can be modified by specifying a flags value. Values can be any of the following variables,
combined using bitwise OR (the | operator).

The sequence

prog = re.compile(pattern)
result = prog.match(string)
is equivalent to

result = re.match(pattern, string)
but using re.compile() and saving the resulting regular expression object for reuse is more efficient when the
expression will be used several times in a single program.
-----------------------------------------------------------------------------------------------------------------------------------------------
re.search(pattern, string, flags=0)
Scan through string looking for the first location where the regular expression pattern produces a match, and return a corresponding match object.
Return None if no position in the string matches the pattern;
NOTE: that this is different from finding a zero-length match at some point in the string.
------------------------------------------------------------------------------------------------------------------------------------------------
re.match(pattern, string, flags=0)
If zero or more characters at the beginning of string match the regular expression pattern, return a corresponding match object.
Return None if the string does not match the pattern; note that this is different from a zero-length match.

Note that even in MULTILINE mode, re.match() will only match at the beginning of the string and not at the beginning of each line.

If you want to locate a match anywhere in string, use search() instead (see also search() vs. match()).
--------------------------------------------------------------------------------------------------------------------------------------------------
re.findall(pattern, string, flags=0)
Return all non-overlapping matches of pattern in string, as a list of strings. The string is scanned left-to-right,
and matches are returned in the order found. If one or more groups are present in the pattern, return a list of groups;
this will be a list of tuples if the pattern has more than one group. Empty matches are included in the result.

Changed in version 3.7: Non-empty matches can now start just after a previous empty match.
---------------------------------------------------------------------------------------------------------------------------------------------------
re.finditer(pattern, string, flags=0)
Return an iterator yielding match objects over all non-overlapping matches for the RE pattern in string.
The string is scanned left-to-right, and matches are returned in the order found. Empty matches are included in the result.

Changed in version 3.7: Non-empty matches can now start just after a previous empty match.
---------------------------------------------------------------------------------------------------------------------------------------------------
re.sub(pattern, repl, string, count=0, flags=0)
Return the string obtained by replacing the leftmost non-overlapping occurrences of pattern in string by the replacement repl.
If the pattern isn’t found, string is returned unchanged. repl can be a string or a function; if it is a string,
 any backslash escapes in it are processed. That is, \n is converted to a single newline character, \r is converted to a carriage return,
  and so forth. Unknown escapes such as \& are left alone. Backreferences, such as \6,
  are replaced with the substring matched by group 6 in the pattern.
-----------------------------------------------------------------------------------------------------------------------------------------------------


--->Regular Expression Objects

Pattern.search(string[, pos[, endpos]])
Scan through string looking for the first location where this regular expression produces a match, and return a corresponding match object. Return None if no position in the string matches the pattern; note that this is different from finding a zero-length match at some point in the string.

The optional second parameter pos gives an index in the string where the search is to start; it defaults to 0. This is not completely equivalent to slicing the string; the '^' pattern character matches at the real beginning of the string and at positions just after a newline, but not necessarily at the index where the search is to start.

The optional parameter endpos limits how far the string will be searched; it will be as if the string is endpos characters long, so only the characters from pos to endpos - 1 will be searched for a match. If endpos is less than pos, no match will be found; otherwise, if rx is a compiled regular expression object, rx.search(string, 0, 50) is equivalent to rx.search(string[:50], 0).

>>>
>>> pattern = re.compile("d")
>>> pattern.search("dog")     # Match at index 0
<re.Match object; span=(0, 1), match='d'>
>>> pattern.search("dog", 1)  # No match; search doesn't include the "d"
-----------------------------------------------------------------------------------------------------------------------------------------------------
Pattern.match(string[, pos[, endpos]])
If zero or more characters at the beginning of string match this regular expression, return a corresponding match object. Return None if the string does not match the pattern; note that this is different from a zero-length match.

The optional pos and endpos parameters have the same meaning as for the search() method.

>>>
>>> pattern = re.compile("o")
>>> pattern.match("dog")      # No match as "o" is not at the start of "dog".
>>> pattern.match("dog", 1)   # Match as "o" is the 2nd character of "dog".
<re.Match object; span=(1, 2), match='o'>
If you want to locate a match anywhere in string, use search() instead (see also search() vs. match()).
---------------------------------------------------------------------------------------------------------------------------------------------------
Pattern.findall(string[, pos[, endpos]])
Similar to the findall() function, using the compiled pattern,
but also accepts optional pos and endpos parameters that limit the search region like for search().
--------------------------------------------------------------------------------------------------------------------------------------------------
Pattern.finditer(string[, pos[, endpos]])
Similar to the finditer() function, using the compiled pattern,
but also accepts optional pos and endpos parameters that limit the search region like for search().
---------------------------------------------------------------------------------------------------------------------------------------------